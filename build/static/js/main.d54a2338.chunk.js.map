{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","CheckCircle","props","css","Text","TodoItemBlock","TodoItem","onClick","React","memo","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d54a2338.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n    width: 512px;\n    height: 768px;\n\n    position: relative;\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\n\n    margin: 0 auto;\n    margin-top: 96px;\n    margin-bottom: 32px;\n\n    display: flex;\n    flex-direction: column;\n`\n\nfunction TodoTemplate({ children }) {\n    return <TodoTemplateBlock>{children}</TodoTemplateBlock>\n}\n\nexport default TodoTemplate;","import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialTodos = [\n    {\n        id: 1,\n        text: '프로젝트 생성하기',\n        done: true,\n    },\n    {\n        id: 2,\n        text: '컴포넌트 스타일링하기',\n        done: true,\n    },\n    {\n        id: 3,\n        text: 'Context 만들기',\n        done: false,\n    },\n    {\n        id: 4,\n        text: '기능 구현하기',\n        done: false,\n    },\n];\n\n/**\n * CREATE\n * TOGGLE\n * REMOVE\n */\nfunction todoReducer(state, action) {\n    switch (action.type) {\n        case 'CREATE':\n            return state.concat(action.todo);\n        case 'TOGGLE':\n            return state.map(\n                todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo\n            )\n        case 'REMOVE':\n            return state.filter(todo => todo.id !== action.id);\n        default:\n            throw new Error(`Unhandled action type: ${action.type}`);\n    }\n}\n\n// context 2개만들기, 1. state를 위한, 2. dispatch를 위한\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\n\nexport function TodoProvider({children}) {\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\n    const nextId = useRef(5);\n    return (\n        <TodoStateContext.Provider value={state}>\n            <TodoDispatchContext.Provider value={dispatch}>\n                <TodoNextIdContext.Provider value={nextId}>\n                    {children}\n                </TodoNextIdContext.Provider>\n            </TodoDispatchContext.Provider>\n        </TodoStateContext.Provider>\n    );\n}\n\nexport function useTodoState() {\n    const context = useContext(TodoStateContext);\n    if(!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\nexport function useTodoDispatch() {\n    const context = useContext(TodoDispatchContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\nexport function useTodoNextId() {\n    const context = useContext(TodoNextIdContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n    padding-top: 48px;\n    padding-left: 32px;\n    padding-right: 32px;\n    padding-bottom: 24px;\n    border-bottom: 1px solid #e9ecef;\n\n    h1 {\n        margin: 0;\n        font-size: 36px;\n        color: #343a40;\n    }\n\n    .day {\n        margin-top: 4px;\n        color:#868e96;\n        font-size: 21px;\n    }\n\n    .tasks-left {\n        color:#20c997;\n        font-size:18px;\n        margin-top:40px;\n        font-weight:bold;\n    }\n`\n\n\nfunction TodoHead() {\n    const todos = useTodoState();\n    const undoneTasks = todos.filter(todo => !todo.done);\n\n    const today = new Date();\n    const dateString = today.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    });\n\n    const dayName = today.toLocaleDateString('ko-KR', {\n        weekday: 'long'\n    })\n\n    return (\n        <TodoHeadBlock>\n            <h1>{dateString}</h1>\n            <div className='day'>{dayName}</div>\n            <div className='tasks-left'>할 일 {undoneTasks.length}개 남음</div>\n        </TodoHeadBlock>\n    );\n}\n\nexport default TodoHead;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\nconst Remove = styled.div`\n    opacity: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #dee2e6;\n    font-size: 24px;\n    cursor: pointer;\n    &:hover {\n        color:#ff6b6b;\n    }\n`\nconst CheckCircle = styled.div`\n    width: 32px;\n    height: 32px;\n    border-radius:50%;\n    border: 1px solid #ced4da;\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    cursor: pointer;\n    ${props =>\n        props.done &&\n        css`\n        border: 1px solid #38d9a9;\n        color: #38d9a9;\n    `}\n`;\n\nconst Text = styled.div`\n    flex: 1;\n    font-size:21px;\n    color: #495057;\n    ${props => props.done && css`\n        color:#ced4da;\n    `}\n`\nconst TodoItemBlock = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 12px;\n    padding-bottom: 12px;\n\n    &:hover {\n        ${Remove} {\n            opacity: 1;\n        }\n    }\n`\n\nfunction TodoItem({ id, done, text }) {\n    const dispatch = useTodoDispatch();\n    const onToggle = () => dispatch({\n        type: 'TOGGLE',\n        id\n    })\n    const onRemove = () => dispatch({\n        type: 'REMOVE',\n        id\n    })\n    return (\n        <TodoItemBlock>\n            <CheckCircle done={done} onClick={onToggle}>\n                {done && <MdDone />}\n            </CheckCircle>\n            <Text done={done}>{text}</Text>\n            <Remove onClick={onRemove}>\n                <MdDelete />\n            </Remove>\n        </TodoItemBlock>\n    );\n}\n\nexport default React.memo(TodoItem);","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\nimport TodoItem from './TodoItem';\n\nconst TodoListBlock = styled.div`\n    flex: 1;\n    padding: 20px 32px;\n    padding-bottom: 48px;\n    overflow-y: auto;\n`;\n\nconst TodoList = () => {\n    const todos = useTodoState();\n    return (\n        <TodoListBlock>\n            {todos.map((todo) => (\n                <TodoItem key={todo.id} id={todo.id} text={todo.text} done={todo.done} />\n            ))}\n        </TodoListBlock>\n    );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst CircleButton = styled.button`\n    background: #38d9a9;\n    &:hover {\n        background: #63e6be;\n    }\n    &:active {\n        background: #20c997;\n    }\n\n    z-index: 5;\n    cursor: pointer;\n    width: 80px;\n    height: 80px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    position: absolute;\n    left: 50%;\n    bottom: 0px;\n    transform: translate(-50%, 50%);\n\n    font-size: 60px;\n    color: white;\n    border-radius: 40px;\n\n    border: none;\n    outline: none;\n\n    transition: 0.125s all ease-in;\n\n    ${(props) =>\n        props.open &&\n        css`\n            background: #ff6b6b;\n            &:hover {\n                background: #ff8787;\n            }\n            &:active {\n                background: #fa5252;\n            }\n            transform: translate(-50%, 50%) rotate(45deg);\n        `}\n`;\n\nconst InsertFormPositioner = styled.div`\n    width: 100%;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n`;\n\nconst InsertForm = styled.form`\n    background: #f8f9fa;\n    padding: 32px 32px 72px;\n    border-bottom-left-radius: 16px;\n    border-bottom-right-radius: 16px;\n    border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #dee2e6;\n    width: 100%;\n    outline: none;\n    font-size: 18px;\n    box-sizing: border-box;\n`;\n\nconst TodoCreate = () => {\n    const [open, setOpen] = useState(false);\n    const [value, setValue] = useState('');\n\n    const dispatch = useTodoDispatch();\n    const nextId = useTodoNextId();\n\n    const onToggle = () => setOpen(!open);\n    const onChange = e => setValue(e.target.value);\n    const onSubmit = e => {\n        e.preventDefault();\n        dispatch({\n            type: 'CREATE',\n            todo: {\n                id: nextId.current,\n                text: value,\n                done: false\n            }\n        });\n        setValue('');\n        setOpen(false);\n        nextId.current += 1;\n    }\n\n\n    return (\n        <>\n            {open && (\n                <InsertFormPositioner>\n                    <InsertForm onSubmit={onSubmit}>\n                        <Input placeholder='할 일을 입력 후, Enter를 누르세요' autoFocus onChange={onChange} value={value} />\n                    </InsertForm>\n                </InsertFormPositioner>\n            )}\n            <CircleButton onClick={onToggle} open={open}>\n                <MdAdd />\n            </CircleButton>\n        </>\n    );\n};\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background:#aaa;\n  }\n`\n\n\nfunction App() {\n  return (\n      <TodoProvider>\n        <GlobalStyle/>\n        <TodoTemplate>\n          <TodoHead/>\n          <TodoList/>\n          <TodoCreate/>\n        </TodoTemplate>\n      </TodoProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}